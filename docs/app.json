[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n    \r\n    \r\n    titlePanel(\"Illustration of Likelihood-Based Statistical Inference.\"),\r\n    \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            \r\n            h4(\"1) Select a population distribution:\"),\r\n            selectInput(\"Dist\", \"Population Distribution:\", c(\"Bernoulli\" = \"B\",\r\n                                                      \"Geometric\" = \"G\",\r\n                                                      \"Uniform\" = \"U\",\r\n                                                      \"Normal\" = \"N\")),\r\n            h4(\"2) Select the true value of the population parameter:\"),\r\n            conditionalPanel(condition = \"input.Dist == 'B'\",\r\n                      sliderInput(\"thetaB\", \"Population probability, p\", 0.01, 0.99, 0.5)),\r\n            conditionalPanel(condition = \"input.Dist == 'G'\",\r\n                     sliderInput(\"thetaG\", \"Population probability, p\", 0.01, 0.99, 0.5)),\r\n            conditionalPanel(condition = \"input.Dist == 'U'\",\r\n                     sliderInput(\"thetaU\", \"Population upper bound, θ\", 0.1, 2.0, 1.0)),\r\n            conditionalPanel(condition = \"input.Dist == 'N'\",\r\n                     sliderInput(\"thetaN\", \"Population expectation, μ\", -1, 1, 0, step = 0.1),\r\n                     sliderInput(\"sig2\", \"Population variance, σ^2\", 0.5, 1, 1)),\r\n    \r\n            h4(\"3) Select a sample size:\"),\r\n            selectInput(\"n\", \"Sample Size:\", c(\"n=25\" = \"small\",\r\n                                               \"n=100\" = \"med\",\r\n                                               \"n=400\" = \"large\")),\r\n            \r\n            h4(\"4) Click on 'Generate' to simulate n=\",textOutput(\"n\",inline=TRUE),\"independent samples from the population distribution:\"),\r\n            conditionalPanel(condition = \"input.Dist == 'B'\",\r\n                             h4(\"X~Bernoulli(p =\",textOutput(\"thetaB\",inline=TRUE),\").\")),\r\n            conditionalPanel(condition = \"input.Dist == 'G'\",\r\n                             h4(\"X~Geometric(p = \",textOutput(\"thetaG\",inline=TRUE),\").\")),\r\n            conditionalPanel(condition = \"input.Dist == 'U'\",\r\n                             h4(\"X~Uniform(0, θ = \",textOutput(\"thetaU\",inline=TRUE),\").\")),\r\n            conditionalPanel(condition = \"input.Dist == 'N'\",\r\n                             h4(\"X~Normal(μ =\",textOutput(\"thetaN\",inline=TRUE),\", σ^2 =\",textOutput(\"sig2\",inline=TRUE),\").\")),\r\n\r\n            actionButton(\"run\", \"Generate\"),\r\n            \r\n            h4(\"  \"),\r\n            \r\n            h4(\"5) Use the slider(s) below to see how the blue probability mass/density function changes for different parameter values. Can you find a good match between the blue pm(d)f and the sample?\"),            \r\n            conditionalPanel(condition = \"input.Dist == 'B'\",\r\n                             sliderInput(\"l_thetaB\", \"Population probability, p\", 0, 1, 0.5)),\r\n            conditionalPanel(condition = \"input.Dist == 'G'\",\r\n                             sliderInput(\"l_thetaG\", \"Population probability, p\", 0, 1, 0.5)),\r\n            conditionalPanel(condition = \"input.Dist == 'U'\",\r\n                             sliderInput(\"l_thetaU\", \"Population upper bound, θ\", 0.05, 2.1, 1)),\r\n            conditionalPanel(condition = \"input.Dist == 'N'\",\r\n                             sliderInput(\"l_thetaN\", \"Population expectation, μ\", -2, 2, 0, step = 0.1),\r\n                             sliderInput(\"l_sig2\", \"Population variance, σ^2\", 0.5, 1.5, 1)),\r\n            \r\n            h4(\"  \"),\r\n\r\n            h4(\"6) The calculated maximum likelihood estimate(s) for the generated sample are presented below. They occur where the likelihood function is maximised. Move the above slider(s) close to these values.\"),\r\n            conditionalPanel(condition = \"input.Dist == 'B'\", \"p̂ = \",textOutput(\"mleB\",inline=TRUE)),\r\n            conditionalPanel(condition = \"input.Dist == 'G'\", \"p̂ = \",textOutput(\"mleG\",inline=TRUE)),\r\n            conditionalPanel(condition = \"input.Dist == 'U'\", \"θ̂ = \",textOutput(\"mleU\",inline=TRUE)),\r\n            conditionalPanel(condition = \"input.Dist == 'N'\", \"μ̂ = \",textOutput(\"mleN1\",inline=TRUE), \",  σ̂^2 = \",textOutput(\"mleN2\",inline=TRUE)),\r\n            \r\n            width = 3\r\n            \r\n        ),\r\n        \r\n        \r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n            plotOutput(\"Plots\", height = \"1000px\")\r\n        )\r\n    )\r\n)\r\n\r\n\r\n\r\nserver <- function(input, output, session) {\r\n    \r\n    r <- reactiveValues(seed = as.numeric(Sys.time()))\r\n    \r\n    observeEvent(input$run, {\r\n        r$seed = as.numeric(Sys.time())\r\n    })\r\n    \r\n    \r\n    output$n <- renderText({switch(input$n,\r\n                                   \"small\" = 25, \r\n                                   \"med\" = 100, \r\n                                   \"large\" = 400)})\r\n    output$thetaB <- renderText({input$thetaB})\r\n    output$thetaG <- renderText({input$thetaG})\r\n    output$thetaU <- renderText({input$thetaU})\r\n    output$thetaN <- renderText({input$thetaN})\r\n    output$sig2 <- renderText({input$sig2})\r\n\r\n    output$Plots <- renderPlot({\r\n        set.seed(r$seed)\r\n        \r\n        n <- switch(input$n,\r\n                    \"small\" = 25, \r\n                    \"med\" = 100, \r\n                    \"large\" = 400)\r\n        #output$n <- n\r\n        layout(cbind(1,2))\r\n        if(input$Dist == \"B\"){\r\n            x_sample <- rbinom(n, size = 1, prob = input$thetaB)\r\n            t <- table(c(x_sample,0:1))-1\r\n            y2 <- dbinom(0:1,size=1,prob = input$l_thetaB)*n\r\n            b <- barplot(t,ylim=c(0,n),xlab = \"x\",ylab = \"Frequency\",main = \"Sample\", \r\n                         cex.main = 2, cex.lab = 1.5)\r\n            points(b[,1], y2, pch = 16, cex = 2, col = 4)\r\n            segments(b[,1], rep(0,length(y2)), b[,1], y2, lwd = 2, col = 4)\r\n            \r\n            theta_seq = seq(0,1,len = 1001)\r\n            llike <- sapply(theta_seq,function(p){(sum(dbinom(x_sample,size=1,prob = p,log = TRUE)))})\r\n            plot(theta_seq, exp(llike-max(llike)), type = \"l\", lwd = 2, xlab = \"p\",yaxt=\"n\", \r\n                 ylab = \"Likelihood\", cex.main = 2, cex.lab = 1.5,\r\n                 main = expression(paste(\"Likelihood function, L(p;\",bold(x),\")\")))\r\n            abline(v = input$l_thetaB,lwd=2, col = 4)\r\n            \r\n            output$mleB <- renderText({mean(x_sample)})\r\n        }else if(input$Dist == \"G\"){\r\n            x_sample <- rgeom(n, prob = input$thetaG)+1\r\n            xmax <- max(qgeom(0.999,input$thetaG),6)+1\r\n            while(any(x_sample > xmax)){\r\n                x_sample <- x_sample[x_sample <= xmax]\r\n                x_sample <- c(x_sample,1+rgeom(n-length(x_sample), prob = input$thetaG))\r\n            }\r\n            t <- table(c(x_sample,1:xmax))-1\r\n            y2 <- dgeom(as.numeric(names(t))-1,prob = max(0.001,input$l_thetaG))*n\r\n            b <- barplot(t,ylim=c(0,n),xlab = \"x\",ylab = \"Frequency\",main = \"Sample\", \r\n                         cex.main = 2, cex.lab = 1.5, col = \"grey75\")\r\n            points(b[,1], y2, pch = 16, cex = 2, col = 4)\r\n            segments(b[,1], rep(0,length(y2)), b[,1], y2, lwd = 2, col = 4)\r\n            \r\n            theta_seq = seq(0.001,0.999,len = 1001)\r\n            llike <- sapply(theta_seq,function(p){(sum(dgeom(x_sample-1,prob = p,log = TRUE)))})\r\n            plot(theta_seq, exp(llike-max(llike)), type = \"l\", lwd = 2, xlab = \"p\", yaxt=\"n\",\r\n                 ylab = \"Likelihood\", cex.main = 2, cex.lab = 1.5,\r\n                 main = expression(paste(\"Likelihood function, L(p;\",bold(x),\")\")))\r\n            abline(v = input$l_thetaG,lwd=2, col = 4)\r\n            output$mleG <- renderText({1/(mean(x_sample))})\r\n        }else if(input$Dist == \"U\"){\r\n            x_sample <- runif(n,  min = 0, max = input$thetaU)\r\n            xlim <- c(0,2)\r\n            h <- hist(x_sample,plot=FALSE)\r\n            x2 <- seq(-0.1,2.1,len = 1001)\r\n            y2 <- dunif(x2,min=0,max=max(0.001,input$l_thetaU))*h$count[1]/h$density[1]\r\n            ylim <- c(0,max(max(h$counts,na.rm=TRUE),max(y2)))\r\n            plot(h,ylim=ylim,xlab = \"x\",ylab = \"Frequency\",main = \"Sample\", \r\n                         cex.main = 2, cex.lab = 1.5, xlim = xlim, col = \"grey75\")\r\n            lines(x2,y2,lwd = 2, col = 4)\r\n            \r\n            \r\n            theta_seq = input$thetaU + seq(-1,2,len = 1001)/10\r\n            llike <- sapply(theta_seq,function(p){\r\n                if(p <= 0){\r\n                    return(-Inf)\r\n                }else{\r\n                  sum(dunif(x_sample,min = 0, max = p,log = TRUE))\r\n                }})\r\n            plot(theta_seq, exp(llike-max(llike)), type = \"l\", lwd = 2, xlab = expression(theta), \r\n                 ylab = \"Likelihood\", cex.main = 2, cex.lab = 1.5, yaxt=\"n\",\r\n                 main = expression(paste(\"Likelihood function, L(\",theta,\";\",bold(x),\")\")))\r\n            abline(v = input$l_thetaU,lwd=2, col = 4)\r\n            output$mleU <- renderText({max(x_sample)})\r\n        }else if(input$Dist == \"N\"){\r\n            x_sample <- rnorm(n,  mean = input$thetaN,sd = sqrt(input$sig2))\r\n            while(abs(mean(x_sample))>1.5 | var(x_sample)*(n-1)/n > 1.5){\r\n                x_sample <- rnorm(n,  mean = input$thetaN,sd = sqrt(input$sig2))\r\n            }\r\n            xlim <- range(c(x_sample,-3,3))\r\n            h <- hist(x_sample,plot=FALSE)\r\n            x2 <- seq(xlim[1],xlim[2],len = 1001)\r\n            y2 <- dnorm(x2,mean = input$l_thetaN,sd=sqrt(input$l_sig2))*h$count[1]/h$density[1]\r\n            ylim <- c(0,max(max(h$counts,na.rm=TRUE),max(y2)))\r\n            plot(h,ylim=ylim,xlab = \"x\",ylab = \"Frequency\",main = \"Sample\", \r\n                 cex.main = 2, cex.lab = 1.5, xlim = xlim, col = \"grey75\")\r\n            lines(x2,y2,lwd = 2, col = 4)\r\n\r\n            theta_seq = seq(-1.5,1.5,len = 101)\r\n            sig2_seq = seq(0.2,1.5,len = 101)\r\n            llike <- matrix(NA,nrow = length(theta_seq), ncol=length(sig2_seq))\r\n            for(i in seq_along(theta_seq)){\r\n                for(j in seq_along(sig2_seq)){\r\n                    llike[i,j] <- sum(dnorm(x_sample,mean=theta_seq[i],sd=sqrt(sig2_seq[j]),log=TRUE))\r\n                }\r\n            }\r\n            contour(theta_seq, sig2_seq, exp(llike-max(llike)), xlab = expression(mu), drawlabels = FALSE,\r\n                 ylab = \"\", cex.main = 2, cex.lab = 1.5,\r\n                 main = expression(paste(\"Likelihood function, L(\",mu,\",\",sigma^2,\";\",bold(x),\")\")))\r\n            mtext(expression(sigma^2),side=2,line=2.5,cex=1.5)\r\n            points(mean(x_sample),var(x_sample)*(n-1)/n,pch=4)\r\n            points(input$l_thetaN,input$l_sig2,pch=16, col = 4, cex = 2)\r\n            output$mleN1 <- renderText({mean(x_sample)})\r\n            output$mleN2 <- renderText({var(x_sample)*(n-1)/n})\r\n            \r\n        }else{\r\n            stop(\"Option not yet implemented\")\r\n        }\r\n        \r\n    })\r\n    \r\n    \r\n\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
